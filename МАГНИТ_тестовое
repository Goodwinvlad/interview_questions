# Напишите функцию на Python, 
# которая принимает на вход строку и возвращает максимальное
# количество подряд идущих одинаковых символов 
# в этой строке.

from typing import List

class Solution:
    def maxDistance(self, s: str) -> int:
        ans = 1
        curr = 1
        for i in range(1, len(s)):
            if s[i] == s[i-1]:
                curr += 1
            else: 
                ans = max(ans, curr)
                curr = 1
        return ans

s = 'aavaaaaafaaaaatrtttttgfgfg'

print(Solution().maxDistance(s))


------------------------------------------------------------------------------------------

-- У вас есть следующие две таблицы:
-- Таблица "Products":
-- +-----------+------------+-------+
-- | ProductID | ProductName| Price |
-- +-----------+------------+-------+
-- | 1         | Apple      | 0.5   |
-- | 2         | Banana     | 0.3   |
-- | 3         | Orange     | 0.4   |
-- | 4         | Mango      | 0.8   |
-- | 5         | Pineapple  | 1.2   |
-- +-----------+------------+-------+
-- Таблица "Orders":
-- +---------+------------+-----------+
-- | OrderID | OrderDate  | ProductID |
-- +---------+------------+-----------+
-- | 1       | 2022-01-01 | 1         |
-- | 2       | 2022-01-01 | 2         |
-- | 3       | 2022-01-02 | 1         |  
-- | 3       | 2022-01-02 | 2         |
-- | 4       | 2022-01-02 | 4         |
-- | 5       | 2022-01-03 | 2         |
-- | 6       | 2022-01-03 | 3         |
-- | 7       | 2022-01-03 | 5         |
-- | 8       | 2022-01-04 | 1         |
-- | 9       | 2022-01-04 | 2         |
-- | 10      | 2022-01-05 | 4         |
-- +---------+------------+-----------+
-- Вам необходимо написать SQL-запрос, который выводит следующую информацию:
-- (Все метрики вывести в одном запросе)

-- ProductName
-- Количество заказов (Count) для каждого продукта.
-- Общую сумму заказов (TotalAmount) для каждого продукта.
-- Ранг товара в количестве заказов(больше заказов выше ранг)
-- Результат должен быть отсортирован по убыванию количества заказов.

SELECT 
    p.ProductName,
    COUNT(o.OrderID) AS OrderCount,
    SUM(p.Price) * COUNT(o.OrderID) AS TotalAmount,
    RANK() OVER (ORDER BY COUNT(o.OrderID) DESC) AS OrderRank
FROM 
    Products p
JOIN 
    Orders o ON p.ProductID = o.ProductID
GROUP BY 
    p.ProductID, p.ProductName, p.Price
ORDER BY 
    OrderCount DESC;
```

Давайте разберем запрос по частям:

1. `SELECT p.ProductName, COUNT(o.OrderID) AS OrderCount, SUM(p.Price) * COUNT(o.OrderID) AS TotalAmount, RANK() OVER (ORDER BY COUNT(o.OrderID) DESC) AS OrderRank`:
   - `p.ProductName` — выбираем имя продукта.
   - `COUNT(o.OrderID) AS OrderCount` — подсчитываем количество заказов для каждого продукта.
   - `SUM(p.Price) * COUNT(o.OrderID) AS TotalAmount` — вычисляем общую сумму заказов для каждого продукта.
   - `RANK() OVER (ORDER BY COUNT(o.OrderID) DESC) AS OrderRank` — присваиваем ранг каждому продукту на основе количества заказов, где большее количество заказов получает более высокий ранг.

2. `FROM Products p JOIN Orders o ON p.ProductID = o.ProductID`:
   - Объединяем таблицы "Products" и "Orders" по полю `ProductID`.

3. `GROUP BY p.ProductID, p.ProductName, p.Price`:
   - Группируем результаты по `ProductID`, `ProductName` и `Price`, чтобы агрегировать данные.

4. `ORDER BY OrderCount DESC`:
   - Сортируем результаты по количеству заказов в порядке убывания.
